-- 1. Установите arend, следуя инструкциям на странице https://arend-lang.github.io/download
--    В IDEA можно просто импортировать данный проект.

-- 2. Определите аналоги следующих функций на языке хаскелл.
{- Haskell:
   second :: Nat -> Nat -> Nat -> Nat
   second _ y _ = y

   apply :: (Nat -> Nat) -> Nat -> Nat
   apply f x = f x

   compose :: (Nat -> Nat) -> (Nat -> Nat) -> Nat -> Nat
   compose f g x = f (g x)

   flip :: (Nat -> Nat -> Nat) -> Nat -> Nat -> Nat
   flip f x y = f y x

   second' = flip (second 0)
-}

\func second (x y z : Nat) : Nat => y
\func apply (f : Nat -> Nat) (x : Nat) : Nat => f x
\func compose (f g : Nat -> Nat) (x : Nat) : Nat => f (g x)
\func flip (f : Nat -> Nat -> Nat) (x y : Nat) => f y x
\func second' => flip (second 0)

-- 3. Расставьте приоритеты функций f1, f2, f3, f4, f5 и f6 так, чтобы функция test проходила тайпчекинг.

\import lect01 \hiding (+,*)

\func f1 (x y : Nat) => x
\func f2 : Nat => 0
\func \infix 0 f3 (f : Nat -> Nat) (z : Nat) : Int => 0
\func f4 : Nat => 0
\func \infix 6 f5 => f1
\func f6 => f4

\func test => f1 f2 f3 f4 f5 f6

-- 4. Определите функцию if, аналогичную следующей функции:
{- Haskell:
   if :: Bool -> a -> a -> a
   if True t _ = t
   if False _ e = e
-}

\func if {a : \Type} (cond : Bool) (tbranch fbranch : a) : a \elim cond
  | true => tbranch
  | false => fbranch

-- 5. Определите || через if.

\func \infixr 2 || (x y : Bool) : Bool => if x true (if y true false)

-- 6. Определите возведение в степень и факториал для натуральных чисел.

\open Nat \hiding (-,div) -- Здесь лежат + и *.

\func \infixr 8 ^ (x y : Nat) : Nat \elim y
  | 0 => 1
  | suc y => x * (x ^ y)

\func powTest1 : 10 ^ 4 = 10000 => idp
\func powTest2 : 3 ^ 1 = 3 => idp

\func fac (x : Nat) : Nat \elim  x
  | 0 => 1
  | suc x => (suc x) * fac x

\func facTest1 : fac 0 = 1 => idp
\func facTest2 : fac 6 = 720 => idp

-- 7. Определите mod и gcd.

\func mod (x y : Nat) => x - (y * div x y)

\func modTest1 : mod 19 3 = 1 => idp

\func gcd (x y : Nat) : Nat => gcd' y x y
    \where
      \func gcd' (s x y : Nat) : Nat \elim s
        | 0 => x
        | suc s => \case y \with {
          | 0 => x
          | y => gcd' s y (x `mod` y)
        }

\func gcdTest1 : gcd 5 3 = 1 => idp
\func gcdTest2 : gcd 3 5 = 1 => idp
\func gcdTest3 : gcd 16 8 = 8 => idp
\func gcdTest4 : gcd 8 16 = 8 => idp
\func gcdTest5 : gcd 0 3 = 3 => idp
\func gcdTest6 : gcd 3 0 = 3 => idp
\func gcdTest7 : gcd 16 1596 = 4 => idp
\func gcdTest8 : gcd 1596 16 = 4 => idp
